setup: |
  cd project/clang; make all
  cd project/golang/; make all
  echo "Done installing project dependencies!"
---

# Reminder for ^^^:
# All commands executed in the setup block are done in a
# one-by-one fashion from the current working directory. This means
# that there is no history associated with running the commands and
# thus multiple commands must be run in a single chain.

# perform checks on a file
- project/clang/bounded-cpu.c:
    - description: Ensure that the bounded-cpu.c file exists in project/clang
      check: ConfirmFileExists
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for bounded-cpu.c
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    - description: Use the argv command-line arguments to access bounding parameter
      check: MatchFileFragment
      options:
        fragment: argv[2]
        count: 1
        exact: true
    - description: Use single-line comment character sequence in a C program
      check: MatchFileFragment
      options:
        fragment: //
        count: 5
        exact: false
    - description: Use the argv command-line arguments to access letter parameter
      check: MatchFileFragment
      options:
        fragment: argv[1]
        count: 1
        exact: true

# perform checks on a file
- project/golang/bounded-cpu.go:
    - description: Ensure that the bounded-cpu.go file exists in project/clang
      check: ConfirmFileExists
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for bounded-cpu.go
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    - description: Use the os.Args command-line arguments to access bounding parameter
      check: MatchFileFragment
      options:
        fragment: os.Args[2]
        count: 1
        exact: true
    - description: Use the os.Args command-line arguments to access letter parameter
      check: MatchFileFragment
      options:
        fragment: os.Args[1]
        count: 1
        exact: true
    - description: Use single-line comment character sequence in a Go program
      check: MatchFileFragment
      options:
        fragment: //
        count: 3
        exact: false

# perform checks on a file
- project/clang/unbounded-cpu.c:
    - description: Ensure that the unbounded-cpu.c file exists in project/clang
      check: ConfirmFileExists
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for unbounded-cpu.c
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    - description: Do not use an argv command-line arguments for a bounding parameter
      check: MatchFileFragment
      options:
        fragment: argv[2]
        count: 0
        exact: true
    - description: Use the argv command-line arguments to access letter parameter
      check: MatchFileFragment
      options:
        fragment: argv[1]
        count: 1
        exact: true
    - description: Use single-line comment character sequence in a C program
      check: MatchFileFragment
      options:
        fragment: //
        count: 3
        exact: false

# perform checks on a file
- project/golang/unbounded-cpu.go:
    - description: Ensure that the unbounded-cpu.go file exists in project/golang
      check: ConfirmFileExists
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for unbounded-cpu.go
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    - description: Use single-line comment character sequence in a Go program
      check: MatchFileFragment
      options:
        fragment: //
        count: 3
        exact: false

# run a command
- description: Use go fmt to confirm that bounded-cpu.go is formatted correctly
  command: output=$(go fmt project/golang/bounded-cpu.go 2>&1); test -z "$output"

# run a command
- description: Use go fmt to confirm that unbounded-cpu.go is formatted correctly
  command: output=$(go fmt project/golang/unbounded-cpu.go 2>&1); test -z "$output"

# run a command
- description: Run the bin/bounded-cpu program in the project/clang
  command: ./project/clang/bin/bounded-cpu A 2

# run the program and confirm correct number of lines in the output
- description: Run the bin/bounded-cpu program in the project/clang and confirm two non-blank output lines
  check: CountCommandOutput
  options:
    command: ./project/clang/bin/bounded-cpu A 2
    count: 2
    exact: true

# run the program and confirm a fragment exists in the output
- description: Run the bin/bounded-cpu program in the project/clang and confirm no zero output
  check: MatchCommandFragment
  options:
    command: ./project/clang/bin/bounded-cpu A 2
    fragment: 0
    count: 0
    exact: true

# run the program and confirm a fragment exists in the output
- description: Run the bin/bounded-cpu program in the project/clang and confirm fragment in output
  check: MatchCommandFragment
  options:
    command: ./project/clang/bin/bounded-cpu A 2
    fragment: 2
    count: 1
    exact: true

# run a command
- description: Run the bin/bounded-cpu program in the project/golang
  command: ./project/golang/bin/bounded-cpu A 2

# run the program and confirm correct number of lines in the output
- description: Run the bin/bounded-cpu program in the project/golang and confirm two non-blank output lines
  check: CountCommandOutput
  options:
    command: ./project/golang/bin/bounded-cpu A 2
    count: 2
    exact: true

# run the program and confirm a fragment exists in the output
- description: Run the bin/bounded-cpu program in the project/golang and confirm no zero output
  check: MatchCommandFragment
  options:
    command: ./project/golang/bin/bounded-cpu A 2
    fragment: 0
    count: 0
    exact: true

# run the program and confirm a fragment exists in the output
- description: Run the bin/bounded-cpu program in the project/golang and confirm fragment in output
  check: MatchCommandFragment
  options:
    command: ./project/golang/bin/bounded-cpu A 2
    fragment: 2
    count: 1
    exact: true

# perform checks on a file
- writing/reflection.md:
    - description: Ensure that the reflection.md file exists in the writing/ directory
      check: ConfirmFileExists
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for the reflection
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    - description: Delete the 'Add Your Name Here' prompt in the reflection file
      check: MatchFileFragment
      options:
        fragment: "Add Your Name Here"
        count: 0
        exact: true
    - description: Write a minimum of 500 meaningful words in the reflection
      check: CountFileWords
      options:
        count: 500
        exact: false
    - check: CountMarkdownTags
      options:
        tag: heading
        count: 10
        exact: false
    - check: CountMarkdownTags
      options:
        tag: code_block
        count: 2
        exact: false

# count number of commits in the GitHub repository
- description: Have at least a specific minimum number of 10 commits in repository
  check: CountCommits
  options:
    count: 10
